TODOs
=====

think about how to handle additional npc information - does this go into a separate file? Does this go into the map?
think about how to persist game over time - save and restore
adding additional commands - (a)ttack, (s)earch, save, restore, talk - need to figure out what command will change the cursor
add additional cursors
make cursor calculation more exact <-- done
Make MainWindow to actual controller Class, have a WindowBuilder Class that does exactly that
make wrapping on the overworld actually work :D
define character, or rather, make configurable
define dexterity to make more moves
define additional tile types <-- done
implement LoS <-- basic done, algorithmn probably has an error
implement character attributes <-- done
implement containers <-- mostly done
implement magic
implement food
implement food consumption
implement illness
implement poison
implement experience points
implement levels
implement THACO <-- do I need that?
implement parry <-- how to implement?
implement block <-- how to implement?
implement damage substraction <-- how?
implement two handed weapons <-- done, there is only one slot :D
implement ranged weapons <-- almost
implement attack :D <-- almost
implement visibility range with full darkness <-- done
implement rays <-- doneish
implement triggers
implement scripting
implement dialog system <-- basic done
implement drop <-- done
implement get <-- done
implement basic talk <-- done
implement drag'n'drop <-- done
implement monster spawn <-- done
implement move <-- done
implement checkpoints
implement basic scheduling <-- done
implement melee attack <-- almost done
implement game state depending music <-- DONE
implement better game state <-- done
implement UI Model <-- done
think about adding game loop not to block EDT <-- DONE
remove timer from EDT <-- DONE
implement real game state from game mechanics
extract game configuration <-- DONE
bug: NPC will first move to melee, then if you move away, NPC will switch to ranged <-- done

make music stop victory, once the song is done. how to do this?
perhaps just state variable will take care of this?

figure out a good way to get corpse drawn and not rely on logic during drawing.
i.e. have a trigger once state is dead, update current image and do not update it again.
same thing for poisoned or sleeping. poisoned could be current image rendered slightly green.
create images before, or draw on demand?

want to implement tiny tool tips next to cross-hairs to indicate something about target.

want to implement changing cursors

need to implement attack remembering last target.

Map stuff -
so maps have layers kind of with furniture and inventory. how about I have map tile that have other contents?
Or I just draw village completely without second layer.


COMMANDS:
Add open and close command.
Use command?
options menu or dialog


SOUND:
sound effects - done

DONE -map sound effects to commands - ATTACK (special case, sigh), move, drop, open, cast. can all be mapped directly.
no need to have this hard coded in the actual entity methods. no wait, needs to be that way.
blocked or not is also handled that way. damnit.


Big Todos:
DONE make drawing more efficient - try by drawing each tile only once.
DONE also properly calculate that only the tiles that are actually visible are being drawn
DONE calculate that only the lifeforms on screen are drawing and only handled in the queques.
DONE currently all are changed in getAnimatedEntities()
DONE will also need to recalculate the tiles by player,
DONE lets try a new UI lense implementation now

DONE Will need to switch Map parsing to have a x/y 2d array.


another todo:
slow movement, where one step for player is two steps for World and NPCs.

DONE
when in targetmode, when mouse is moved, highlight tile that would be the target of the action - slashie
that means that the statemachine will carry mouseposition on the grid and tile under cursor at all times
Will reduce getting mouse position again and again and again, if mouse is moved, store it once, get it back


DONE
  |00|01|02|03|
------------------------
00|xx|mt|mt|mt|
01|xx|mt|mt|mt|
02|xx|mt|mt|mt|

so I have a 2d array with MapTile[tilesize][tilesize], a smaller version of the whole map
I always work within this array and add, or remove rows, depening on the movement direction.
or I can just re-create this with each step
That way: no need for calculating screenposition, I know it already. No need to calculate the offset,
I dont care.
I can iterate once over the x*y array,
for each tile, check whether it is black or dark or hidden
whether it needs ot be brightened up based on player or furniture
draw background, then draw npc or furniture or inventory on top.
should be much much much faster
for (int x = 0; i < tilesize; x++)...




DONE remove NPC generics and just move them into map. This is only a bit more XML in contrast to all of the issues this is
causing

DONE finally take away the representationlayer, it adds nothing of value. <-- done

DONE start again tests, lets see how much ui dependency we have <-- done

done take all image references out of the classes and exchange them by ints which point to the image in an image list.
todo for today: check whether we have one club on the map, or several. do we need to have only one item of
            todo: a kind? if the item is stateless, then yes. If not, then hmmmm.

TODO - get a city map and convert it, or re-create one - with a few npcs and furniture and so on for testing.
TODO - create a test case for talking
TODO - create a fix framework for passing a turn during a test. best write this down as method only.
TODO - test foreground animation, let it snow
TODO - do some more battle tests
TODO - implement fleeing for NPCS
TODO - remove last image references from equipment and attributes

TODO separate sound effects and music manager from player
todo properly annotate sound effects


s of the Java 2 platform v1.2, this class was retrofitted to implement the Map interface,
making it a member of the Java Collections Framework.
Unlike the new collection implementations, Hashtable is synchronized.
If a thread-safe implementation is not needed, it is recommended to use HashMap in place of Hashtable.
If a thread-safe highly-concurrent implementation is desired,
then it is recommended to use java.util.concurrent.ConcurrentHashMap in place of Hashtable.