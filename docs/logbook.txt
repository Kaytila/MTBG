Logbook, aka what did I do, a bit late to start this but here we go:

previously:
switched to maven
implemented eventbus to at least show the weather images
animation system for weather async might be working properly.
how to do this for sync? does the code work as well?
animating players - how could this even work? Does the thread know all animate able objects and just iterate over them and do the switch case?
Getting Tiles defined properly on the screen, not as simple graph lines, but as objects with tool tips
moving the player around the screen as turn action
moving the focus along with the player, so player stays in center
adding sound
adding map changes
adding animated tiles

History of the changes:
2020-05-24: finally made log4j2 work at least in the basic version. what was wrong? I just did not read the tutorial very carefully.
2020-05-25: just added eventbus to random animation system. will need to use this one, everything else is not feasible at all.
2020-05-26: i was being lazy today, only added position to player as I will need to get a position on the map somehow.
2020-05-27: thought about game map, position and player position a bit. 
			Added players to the Map as well. 
			No, wait, do not need to.
			stumbled over 
			https://stackoverflow.com/questions/17916057/tile-drawing-on-canvas-based-on-file-with-ints 
			this pretty much answers my questions and will make things easier. a lot easier.
2021-05-03:	and I have this kind of running again on new hardware with even faster hardware, and Maven rocks, as it automatically downloaded everything.
			I am in love with Maven.
			Something is not yet working completely, but oh well, good enough for half an hours work.
2021-05-26:	So sometime in the past, I redid the security policy cause it was missing, re-added the splash window and tried to get everything in the workspace.
			Idea how to deal with players - actor images are all handled via animation thread. this means that it should be possible to have multiple changes 
			during the same animation cycles.
			the position of the player - not the image will decide where to draw the image in the end.
2021-05-29:	So I played around some time again with threading and keyboard/mouse interface - and i dont really understand either.
			There are no mouse events caught, no keyboard events caught, this is interesting.
			Threading is a huge topic of course, but it does not matter much really.
			performance and things like that are a million years from being important.
2021-09-16:	So the days are getting shorter and I have a little bit of more time - switched grid canvas to swing, probably a better way to do things.
			It appears I do not comprehend my setup anymore. I have a Game, the game has players, I can iterate over them, but the toString method returns zilch?
			so lo and behold, i have made progress, basically i just take the player number, put the current image into a list on the canvas, so there is only
			one active image per player on the canvas, if that changes in the animation code, message is sent, canvas is redrawn completely.
			It appears the JPanel is better suited and less flashy.
			So, now its really off to keyboard control is it not?
			https://docs.oracle.com/javase/tutorial/uiswing/misc/keybinding.html
			OK, so the gridcanvas has focus
2021-12-30:	Adding a border to check the focus of the grid canvas, will need to calculcate grid and grid sizes somehow soon
2022-01-06:	so added a simple grid to the visible JGridCanvas. Tomorrow I will think about having a turn loop (game thread?)
			which waits for input, i.e. Action then the next player is being triggered.
			If this works, adapt the player position with the action.
			if this works, get the player position to be calculated on the screen.
			if this works, get the player image being recalculated each time the animation thread runs.
2022-01-09:	so player position is being updated now already.
			player is moving
			currently whole component is redrawn
			not sure how this will work
			need to look into drawing background image and drawing player on it.
			the rest works, so happy :D:D:D
			so tried to center the player graphics with tile size 32 and image size 16. this works, but it is a bit icky. would like to better calculate this.
			Also, calculating this each time an image is drawn. probably something to figure out during game start in a separate module and then only use
			set properties.
			next stop: drawing player image over background colours.
			further stop: position stored on the player or on the map?
			ok, you can create images from pixels, thats great, but it appears pixels and borders do not really work or i am stupid.
			but I need to draw some more images first: grasslands, mountain, river, sea, swamp, hills.
2022-01-10:	so the images are now rendered into transparent. ImageIcon and ImageIO ... the ways paths are handled, it is a nightmare.
			these are the things where java sucks, really sucks.
2022-01-11:	refactoring Player a little bit - image handling is now in ImageUtils. hopefully to be used once I add environment and random movement.
			ideas for that: random movement in all directions, if player is already there, do not move in that direction.
			if obstacle is also there, do not move.
			if three places from original spawn spot has been reached, do not move away but only move closer anymore.
			?
2022-01-12:	maven update - not sure why this is not working properly, in my book, if i click on "update" it should update.
			Awesome, so I have two players moving on the map and the map grids have colors :D:D:D
			So basically, now I can draw background terrain icons
			did something small in addition: loaded sun image as icon for taskbar and frame.
			Nice? No, working? Sure.
			Changed Game to be a Singleton, can go through a lot of code and take away game as reference.
			Probably not needed anywhere for Game.getCurrent() will return the same thing.
2022-01-13:	So needed to break up the game startup into more pieces, as doing all in the constructor leads to all kinds of problems
			if you want to work with a singleton.
			but that is fixed. also there are basically three different lists now.
			list for players - awaiting keyboard commands
			list for npcs - doing random events
			list for both - used in animation system to have it running
			i should switch to no animation system or simple animation system to see where this breaks :D
			npcs on the map and environment act now before the turn is advanced.
			need to think of a way to store all possible actions in an action to have a complete "retract turn"
2022-01-14:	so the UI has now an undo button which calls simply "retract turn" - this leads now to interesting errors
			so the turn already rolls over automatically.
			so 1st movement happens in turn 0,
			then in turn 1, we retract.
			then we are in turn 0 again,
			and take the actions and invert all the actions, kind of.
2022-01-15:	some refactoring happened. All Entities support doAction() now. 
			Only PC is player character now.
			NPCs are separate.
			World is separate as well.
2022-01-16:	There is a map creation now which creates 12x12 of type Type.
			This is the the basis for moving 5x5 grid over the map with the PC staying in the center.
			added VM parameter for quicker startup.
2022-01-17:	So EventBus events are being called only if the UI exists.
			moved weather system into its own startup method.
			Need to figure out how to start with weather already called and visible instead of having null weather and then adding it later on.
			Big to do: always have pc center in the center.
			So Ocean Images are created with curvedlines in a function.
			Might need to do this only once at startup and add to maptile as representation?
2022-01-19:	So tried changing the UI Code to actually standard Swing. I have no idea why this was working in the first place.
			Now it appears to be standard Swing code, and it isnt working anylonger.
2022-01-20:	partial rollback: "MainWindow" which is basically the Listener(Controller) class is back in action. MainFrame exists also.
			No content pane and all controls are added to the frame in the listener class.
			Controller class still exists but I need to ask myself why.
			So MainWindow is now controller class and also UI Building Class - strikes me as very odd, but hey its working.
			Also, the minor changes to Weather/WeatherSystem/JWeatherCanvas lead to the weather appearing right away.
			Perhaps there needs to be a check whether the UI is completely there, before firing messages over EventBus.
			But that is to do. Still need to ask someone as to how the build order for a swing UI should actually be,
			or perhaps what to use for stuff like this anyhow. AWT is out, SWT is also out. JavaFX is ... weird.
			So on a positive note, I have learned a few things how not to do it for now.
			Added Minimal cursor change for the mouse and added mouse listeners and mouse move listeners.
			To do Cursor: calculate where the cursor is compared to the center of the tile the player is on.
			Either mathematical or with if, else and then update the cursor to the correct arrow.
			So, initial cursorDraw was a little bit too small, but in theory, everything works.
			So, I can either find icons, or draw all 8 on my own, or draw one and rotate it in 45 degree steps, either 
			from scratch in memory or write to disk, or both.
2022-01-21:	So I have a kind of working cursor.
			Generated images are not working yet.
			Cursor is moving in corridors according to movement, as there is only n,e,s,w movement. actor already moves on the screen.
			However, turn advancement and so on is not really handled yet, needs to be done.
2022-01-22:	so mouse clicked is working, with history, turn advancement and so on.
			however, the cursor does not update properly if the PC moves past the cursor. Problem here happening.
			TODOs:
			Implement timers for pass turn and for pressed event.
			I really do not want to deal with the map movement :D
			Something for tomorrow probably.
2022-01-24:	So remove clicked event and deal with "mouse pressed" and "mouse released" works way better.
			A simple swing timer takes care of this now.
			This is not super elegant yet.
			Moving the mouse while pressed will not make it go into the other direction, but it does not matter yet.
			progress!
			Passing a turn also now works as well with a swing timer. Fuck the rest, its working.
			You can even retract the pass actions :D:D:D:D:D
2022-01-25:	not wanting to deal with the map to position calculation.
			I am looking for other things to deal with.
			Might start working on the text interface, to fuck up the UI again.
			So InputFields are appearing, they look awful, but good for a start.
2022-01-26: retracting inputfield works fine now.
			So mouse cursors are created manually now.
			MouseDragged event needed to be caught, but:
			It is necessary to make the left right top bottom calculation a little bit more lenient.
			WeatherCanvas is still taking about the whole contentPane, I do not understand why this is the case yet.
			But I guess, in the course of a real UI, this will go away eventually.
			Added inventory and space as actions with inventory not being an action but opening a dialog instead.
			Z will probably also lead to z-stats (in the old ultima way)
2022-01-27:	So created AbstractDialog with ZStatsDialog and InventoryDialog. 
			Trying to get a Button to appear, but it appears I am too stupid for Swing.
2022-01-28:	So I tried to dabble with some music playing and it appears with the help of stackoverflow this is rather easy
			Java FX appears to be helpful for a change.
			Need to figure out how to do a loop, but random selection of ultima IV and V Songs will work fine.
			So music selection is interesting. Not sure how to do this properly.
			Something for tomorrow. I am content with the progress.
2022-01-29:	So music is now running. Clips does not help, needed to switch to code creating SourceDataLine instead.
			Why? clip is probably not thread-safe or anything. This works.
			To do here is to tag songs and have certain actions in the game also trigger a change of music.
			But much progress with little stackoverflow lookup.
			Small To do here: stop music when deactivated or iconofied and restart when active again.
2022-01-30:	So the solution for WeatherCanvas misbehaving was the default LayoutManager.
			Setting this to null worked wonders. Still not working for the dialogs.
			So music is only stopped if the game is deactivated / iconofied, not if a dialog is opened.
			Same thing needs to happen with animation, but I think this can be continuously drawn offscreen.
2022-01-31:	starting Map to UI Position calculation. Doing a save first online.
2022-02-01: so recalculating the map coordinates almost, almost works. Not sure yet where the error is.
			Not sure whether I actually need to lens and the list of tiles, but its easier to work with if the filtering is correct.
			IF the filtering is correct, not sure yet whether this is the case.	
2022-02-02: So the scrolling works, positioning the Player and the NPCs on the tiles does not work yet.
			For some reason, mouse and keyboard input is broken, but I think this is a question of the hard hard logging now.
2022-02-03:	I got the positioning somewhat correct, with the borders being drawn black if there is no more content.
			Can definitely be used for LoS, for indoor maps.
2022-02-04:	So there is an issue with idling - a space idle even does not lead to an action that is logged, at least not in the log.
			Also, the positioning of NPCs appears to be off for whatever reason. Not on the map, on the UI of course.
			More to be done tomorrow morning there.
			Next topics: Perhaps think about changing Map to current map and thinking about entering areas.
			XML needs to be extended for this, also need an series of images.
			Need:
			- which map this goes to
			- where on the map this goes to
			- how it goes back
			- is it indoors?
			- if in town, is there rain?
			- think about adding weather effects in a animated thread but only regularly going through the images instead of random like for NPCs and Player
2022-02-06:	so multiple things happened today in a couple of hours:
			1. Map Offset and UI offset are solved, with a lot less code than before
			2. the lense is gone again so to speak, might come back for LoS
			3. background images are only loaded once now
			4. background images are on a separate thread now and not random but morosely cycling through the images
			5. we have a huge 111x111 map now. loading this actually takes a second
			6. game has a current map now which for starting is of course the game map
			7. still thinking about adding rain or snow animations now over the map into the foreground with transparent images, or calculate the drops on the fly?
			lots of success today, I am very happy with this progress - I stumble over smaller language issues on my side, but well
			So did some more work in the evening, thinking about how to implement blocking tiles.
			Type will block tiles, as will setMapPosition(), as will movement.
			There is a bug in lookahead but I do not recognize this now. Time for bed zzZzz.
2022-02-07:	found the bug: 1. lookAhead returns false if not blocked. also one direction had a copy and paste error.
			so I have reworked Map and GameMap now - I am actually not sure why I keep GameMap, this might go and be kept in a variable in Game.
			Moving to the new map kind of works, there is an interesting stack trace somewhere, but this is awesome progress :D
2022-02-08: So I forgot to add an entry to the logbook yesterday - switching the maps now works. NPCs are now also part of the Map definition.
			Startup - as always - will need to be handled a little bit differently. Now, moving from map to map without having npc artefacts on the drawn map are next.
2022-02-09:	so moving from map to map persists the NPCs now. Horray, something I can do better than ultima V :D
			Also, loading NPCs from XML into Map also works.
2022-02-10: so I had a bug where the player was added to the current map again for each switch.
			So what do we try now?
			Lets check whether we can make weather go away indoors :D
			So weather none has a black icon, but it will not update immediately, so weather is broken.
			Yes, weather is definitely broken. This is the first of the threaded systems I wrote about two years ago and hell what did I do there?
			So: each map has a weather. 
			No Weather is also weather, not just a type.
2022-02-11:	yes, weather is horribly broken. what did i think of when i did that???
2022-02-12:	weather is still broken so what of.
			OK, weather is no longer broken. Its not yet perfect. I need to change this more like Animation system, should be easier to implement.
			So I am thinking about adding yet another layer of images on top.
			Will be snow or hail or rain images, to draw on top of the whole thing.
			So the images are created and are added. if the weather is rain or snow or hail, the images are drawn over the foreground.
			Also, map switching is very fast now, as the n/e/s/w connections are simply just created at game start.			
			but currently they are not necessary at all, as this is part of the map. Not sure actually if this is not necessary at all.
			Need to go through the code and check where I do lazy inits and where I dont. I think I am mixing.
2022-02-13:	tried to get android studio to run morgaelin - but ugh, this is awful. Asking Slashie for help
			fiddled around a little bit, map calculation still had a bug where the map position was not set during parsing the xml,
			but afterwards when re-calculating the new connections.
			how not to do it - one method for one thing.
			implemented armor, weapons utility items in separate files and XML parsers. might be overkill but the types are different enough.
2022-02-14:	so I have figured out that with the "background images", I have broken my own design. This is actually why I have created the TileType Class.
			So how about refactoring? Map tile extends animated representation and loads the images on startup?
			removed tile type class. Added things for equipment and the like, broke map transition, somewhere? somehow?
			This tells me one thing: I need test cases. automated test cases.
			This tells me, do not do as much copy and paste.
2022-02-15:	So I implemented wearItem/WieldWeapon, removeWeapon/RemoveArmor/removeArmorPosition and Inventory. and GetItem and DropItem :D
			All of this definitely needs more work, but currently this is good enough. Need to think about the UI anyhow - will be U6 style currently.
			Do not think I can manage with a real paper doll.
			So I have barged my way through some dialog code: in essence, calling super in a dialog is stupid.
			you need to define everything on its own level.
			But I solved the issue, opaque is the issue, this of course needs to be true, not false.
			Still to fix: why do the buttons not always appear right away in a fucking three control dialog?
			OK, me being stupid again.
			To do soon: https://stackoverflow.com/questions/22266506/how-to-add-image-in-jlist
2022-02-16:	so I worked some more on inventory & items yesterday. 
2022-02-17:	inventory dialog list is showing item + item name now.
			i can place items on the ground now.
			trying to identify the tile under the cursor.
			So what a day: I can now get items (the action is triggered before the mouse is pressed still),
			they are removed from the map, hence not drawn onto the UI, and appear in inventory.
			Awesome :D
			The fine print needs some more work (i.e. cursors, engine states and so on).
			But this is basically the basis for Talk, attack, drop and get.
			Next stop, equipment dialog? Or perhaps rather do a better list cell renderer?
2022-02-18:	fiddling around with state - not much progress there right now.
			refactored cursor handling and moved it all to cursor utils which basically holds the cursor state now.
			Not sure how well this will work with the dialogs, but lets see how long there are dialogs.
			So after changing cursor to 48x48 and updating the calculation a little bit, this already looks much better.
2022-02-19:	worked a little bit on idle timer. This is off somewhere. Now its not off anymore. If I calculate the cursor in one method, this one needs to be correct :D
			so how about turn? is turn something global or rather local for the map?
			Do maps contain turns? i.e. does retract turn work on map level or on game level?
			perhaps make both possible and test both.
			Another thing - cursor state - best guess ist hat all cursor state is done in a separate class, not in main
			window.
			This is done now, but perhaps a game state class is needed? or really a state machine class which keeps track of all state?
			UI State machine rather- but what is that? A Controller :D
			Now when getting and mouse is outside of grid, cursor is centered on player.
			ESC is still going somewhere somewhen, not sure about this.
			So inventory dialog has some nice popup now with a list selection model and a listselection class.
			So many classes, but well, this is MVC after all.
			Ok, so selection directly lands at the item in the model of the list and this works.
			Awesome.
			Next thing to do: implement equip (should be easy) and drop (close dialog, open selection, pause .... argh!)
			OK, so equip already works, wonder whether this will also work for NPCs, who dont have an inventory dialog.
			The encapsulation is kind of nice, but there are three listener classes right now, this need to go into one.
2022-02-20:	so there is one listener class for the inventory pane now. Big achievement.
			and list selection events are only fired once now. awesome.
			implemented visibility range in map and xml and test maps. 
			next stop: implementing more dark tiles around the player :D
			ring of darkness is implemented.
			PaintComponent() method is awesome.
			Only question is: when to paint what, currently these are just layered on top without any optimization
			not sure if its really necessary.
			So switching from 7 to 15 tiles was working without any issues.
			So I did some reading on brightness of images, but basically just copied code.
			Will try to figure it out with visibility. Instead of turning black, brighten up surroundings and make less so with distance :D
			Works. Great. Wondering how much CPU/GPU cycles this really needs.
			So NPCs will pick up items now.
			I have realized: The event -> action chain is horribly broken.
			Need to separate between UI Events and Game Actions better.
			UI events are triggered by mouse or keyboard events.
			These lead to game actions which can also be called by NPCs or test cases.
2022-02-21:	so move all item handling from map to tile? how about creating an item factory today?
			the item does not need to know where it is, the tile needs to know.
			also need to fix the XML parser bug. Ok, this does not work, why?
			the item does not know any longer, as does map. only the tile knows.
			so i did not achieve much today apart from breaking some things and then mending them.
			foreground and background animation use the full range of images now. there were two errors there. 
			0 is also valid and only double used to non-animation. I do not dare trying out what happens if I turn off animations.
			the paintComponent() looks a little bit better now and also a little faster and more organized, but this will need to go
			into various sub methods sooner or later.
			so i have figured out that animation system is the repaint() trigger as it is what happens most often.
			so the refresh amount is at 200ms now, that means 5 times per second.
			if there should be even more fluid motions, then it needs to go down even more.
			Question is whether the actual repaint cycle should not be handled by something else which just catches all state and repaints
			wondering whether that should not work better for projectiles, but I guess these can be threaded differently anyhow as
			these will not follow tiles but actual pixels instead. hopefully.
2022-02-22:	refactored paintComponent in gridcanvas because it was high time to do so. looks much better now and still works.
2022-02-23:	currently out of ideas and out of steam what to work on. i do not want to touch reworking the event and action part.
			so lets add some attributes to abstractentity - more classes! Zstats Dialog!
			So Statsdialog is working, it also shows the correct data now. Granted its more of the same, but that gives the possibility to add icons again
			making it much nicer.
			Now to think of additional stats... but some success at least. and about 10 additional classes.
2022-02-24:	So Stats Dialog has nice looking Icons now and they resize automatically based on Font Size. 
			tempted to try out the scaling library and just scale everything to 64 pixels.
			started on drag and drop. why? need this for equipment and need it for inventory container drag'n'drop.
2022-02-26:	so what does a container need? a separate dialog? can I reuse inventory as general class for both player, npc, and container?
2022-02-27:	container work, some container work - drag drop into container.
			So container items work, putting things into it at least works. The other way round still needs to be done.
			Double clicking on the bag opens the bag's inventory which is re-using inventory.
			Nice little progress! :)
2022-02-28:	so I have drag images now working, looking to properly understand how drag drop really works, more like the execution of methods.
			based on that, i can implement getting things out of a bag again :D
2022-03-02:	After a few fruitless days: So I do not understand how drag and drop really works.
            I can drag and drop stuff into the bag, but I cannot get it out again.
			Also, I need to be able to drag and drop stuff back onto the grid out of the containers.
			No idea how to do this.
			Anyways, I solved the problem of having commands consist of keyboard and mouse events.
			Next thing to do is drop command from inventory.
			D action -> open dialog -> double click item, close dialog, make cross, finish action
			And dropping works.
			No drag drop dropping yet, but that is shelved for now.
2022-03-03:	fixed the bug with drag drop where a drop removed all instances of an item from inventory but only added one to bag.
			remove all really does that as the docs say :D
2022-03-06:	So I implemented Talk and talk dialog over the last few days and I am running into an XML issue with Sax2 parser.
			I have no idea why this works for all other fields but does not work for newly added ones in both map and npc.
			It is beyond me at the moment.
			But that is something for another time to figure out.
			OK, so Simon told me that exportDone contains the source of the drag, now I need to know the target of the drag, then this should - could work.
2022-03-07:	so i have managed a small thing today so far - dialogs dont open when there is already a dialog open.
2022-03-08:	so drag'n'drop between dialogs and within containers is working now properly. finally. extend AbstractListModel instead of implementing ListModel is key.
			firing additional events and removing the datalistener interface was key as well. now everything works as it should. 
			I can still add the bag to itself, that i need to take care of somewhere.
			So I can drag items onto the grid now :D:D:D
			Switched movement with mouse onto the right mouse button as I want to have dragndrop with the left.
			Perhaps this will switch, perhaps this will be configurable. We will see!
			Good progress!
2022-03-09:	and I can drag drop across the grid as well and from the grid into a container dialog and inventory.
			This is awesome.
			Do I want to drag into a container on the ground? not sure actually.
			Will need to check the visibility of items on the ground.
			Will also need to check whether the maptile simply does not get an inventory as to reuse the class even more.
			So there is a problem with mouse handling and drag drop as expected.
			Now getting creates a Drop? What the? How?
			But that is for tomorrow or for the weekend or next time.
2022-03-10:	so drag and drop now works about everywhere for anything.
			I can also drop onto the player now. Awesome.
			So now I am trying to get the ultima 4 map to load :D
			So no success with the map, but at least I got some refactoring done in entity.
			Problem is with mouse movement and drag drop, or rather dropping dialog and then drag dropping
			something is amiss there but I dont know yet.
			Something for the future to take care of.
			Oh todos: setup git, setup intellij community edition.
2022-03-11: moved to intellij and git.
            additional open topics: so a drop or a get for that matter does not "complete".
            problem is that currently only another non-moving command is kind of ending the existing command.
            not sure how to tackle this yet.
            so i have converted the u4 map.
            need to add a layer on top of map.
            for towns and so on.
            that way i can get caravans and moving things to enter.
            write map to xml is almost done.
2022-03-12: so I have successfully imported the u4 general terrain map as game map. Its also residing as XML.
            need to think about how to deal with the additional layers.
            So all tile types are blocking or not now.
            reimplemented NPC xml parsing as separate class and lo and behold, if you do it correctly it works.
            Also good point of doing switch statements instead of else if nonsense.
2022-03-13: So I have fixed part of the XML nonsense by updating and changing the code and actually making it easier.
            Lets see how this works out in the end.
            Not sure if i do not need a "create instance from Prototype" way, or whether this works as it should.
            I *think* add() in Lists copies the object, so this would actually work fine.
            Fixed the talk dialog to work at least.
            Do not like the way this is structured yet - this has to change.
            So list add() only adds copies, that means that I need to do a lot of new constructors :D
            Already solved it for map and npcs. Lets see about items.
2022-03-14: so talk dialog now closes when bye is uttered.
            Will need to make sure that the action properly closes when this is done.
            Same issue with get and drop and basically all two-step actions.
            Talk and Get are somewhat fixed, but need more work.
            Drop might work. Need to check: do not drop on blocked maptiles.
            Where to do this?
2022-03-15: mouse movement via drag is fixed now.
            refactored a bit the calculate cursor part.
            I would like to make sure that this is called everywhere automatically.
            with each command, with each click or release.
            issue was that i had a mix of relative and absolute locations as input for the cursor calculation.
            as as my own comment states: stupid to rely on the state of the cursor which command to do.
            but it works again.
            Next stop: fix some more drag and drop. I do not understand yet as to why a reject drag is ignored.
            the item disappears sure, but this is a bit weird. why are there nice helper methods if they do squat.
2022-03-16: working on furniture - items are one thing furniture another. they can be a lightsource.
2022-03-17: so I have a working furniture - which caused me to implement lighting and light ranges.
            This is now working.
            Next thing to do is to integrate this with darkness, which is going to be interesting.
            need to completely rewrite this some day, currently i am writing on top of each other
            where I could go tile by tile and write all what's necessary.
2022-03-18: So I have added visibility again and made it work with the light effects. In essence:
            all is dark apart from the area around the player and the area around the light source.
2022-03-19: Did some Intellij refactoring.
            Implemented Game time and map values for that.
            Also implemented visibility range based on game time.
            Will probably need to adjust the ranges a little to look nicer, currently its flat int ranges.
2022-03-20: Reworked the weather system, will probably disable the async weather system, although
            it is more like ultima IV and V.
            Not sure how to do this though yet - the weather system is global but whether there is a fixed weather
            (in towns or desert maps for instance or in caves), this I need to figure out better.
2022-03-21: So I fixed a "bug" with ESC handling - tooltips were the culprit.
            Removed all tooltips and lo and behold, no focus losing anymore.
            But will make sure to have it returned to Gridcanvas.
            Next stop: finish implementing talk.
            Based on talk, will need to think about checkpoints: how to define them, how to add them, how to remove them?
            Small code reduction: removed pointless window listener from WindowClosingAction.
2022-03-22: so talk dialog now closes only after bye has been said and enter is pressed again.
2022-03-30: vacation break over. so what did i do? Implemented move command. teleporting will not work.
            moving first x then y works, a* implementation needs work, also need to check look ahead and make sure i
            can open blocked doors again, but for that i need a better map.
            move also does not have a delay yet, so the commands are run but instantly performed.
            no matter, good progress.
2022-04-01: did not do much yesterday and today apart from some minor updating code to modern versions.
            oh, the main thing i did is to make move work properly. command queue is filled and cleared with a timer with
            a proper delay. So move to is kind of finished.
            Now I have everything in place for a proper a* implementation or at least an approximation and schedules.
2022-04-03: so i took a astar implementation which works from github. it now works also the second time it is run.
            problem was as usually my own code. Now I need to figure out, where the issue is for sometimes, the correct
            list of actions is not created.
            I probably should create a priorityqueue instead of my command queue, or rather subclass it.
            Oh, and I just realized that I need to re-asses the move to after each command for the reality might have
            changed (npcs move, doors close and so on). need to either have just accept the clashes, or I do a full
            recursive approach. Probably the former.
            Ok, played around with it way more than I should have. Not working the way I would like it to have,
            therefore I will go back to the easy way and try to get this running, tomorrow.
            I.e. fill up the queue, run the queue and hope for no collisions on the way.
2022-04-04: so i had yet another bug in the way of setting up the queue - I always took the current map position.
            This of course does not work, need to take future map position into account.
            This now works. I am so good, if I do not stumble over my own feet.
            Does this always work? No, of course not. Will it always work? No, of course not.
            Lets see how this will turn out with NPC schedules. Need to think of a way there.
            I guess I will have to hardcode a few of these.
            Oh, and with lighting and furniture drawing, I had forgotten to check the PC, as it is not an NPC.
            Easy fix, luckily, my tools and systems work very well by now.
2022-04-05: started working on scheduling engine - I can post events with changed events based on minute and so on.
            now need a way to define schedules. perhaps use game times? perhaps use a game time? not sure yet.
            And I have at least a basic running schedule. The framework is a little bit icky and I might need to
            remove the distinction between action and event sooner or later, but for now it still holds :D
            And perhaps it will. Everything was working apart from a damned auto-generated method which returned 0.
2022-04-08: so now I have two ways of ranged attack - one that follows tiles (might actually be good enough already)
            and one that follows strictly pixels :D
2022-04-09: ranged attack works kind of - will need to optimize it, will need to extend missile to have a miss and hit
            image that is drawn over the target.
            there still is a bug that the state is not finished, i.e. the other NPCs do not move. not sure where that is
            but I will find it. There will come a time where I need to refactor a lot of things, this is going to be
            painful but I will move this to a later date.
            Now I can draw basically firebreath as well, or lasers :D
2022-04-11: a day off for programming really - so I found a bug that the missiles were not removed properly.
            this was because the line calculation is trimmed to draw every 5 entries. if the last entry was removed,
            the missile never finished its run so to speak. this is now fixed, if the line is empty, the missile is done
            as well.
2022-04-28: so I had a two week break - still have not solved the missile issue. Not sure currently as to how I could.
            but: implemented some attack calculation, solely based on DEX. Guess armor will have to have a point in
            reducing damage only.
            But hey, progress, again.
            The last commit also includes drawing the explosion png upon successful hit - i will need make this more
            active, or even have a line of images.
2022-05-06: so a small thing - I updated the missile target to always hit the middle of the tile in order to center the
            target animation - will need to think of a way to have target animation extended with pauses.
            Also, implemented a basic health and level system with some attack calculation.
2022-05-08: Updated CommandQueue to fully support the Queue protocol.
2022-06-01: holdequipment needs to go, replaced by a shield and a weapon slot.
            wield weapon now does that.
            implemented basic attack damage calculation.
2022-06-02: need to think how to differentiate between ranged and melee attacks. Where to store this? check the item type?
            store it on entity?
2022-06-04: today worked on melee attacks and limiting the crosshair movement outside of the tile limit. might be a topic
            for mid-range weapons (infamous U4 halberd, or U5 halberd) later on. Not finished, but I think I have the
            idea how to do it.
2022-06-05: implemented melee attack range. This is working now, the crosshair stays inside the correct tiles.
            also works with bigger range for short range or mid range weapons. I like that my frameworks kind of work already.
            Also refactored moveMouse to CursorUtils, has nothing to do with Controller.
2022-06-06: some minor refactoring - removed Game reference from animation system.
            removed cursor centering code and replaced with cursorUtils method.
2022-06-09: currentAction in MainWindow was not emptied if the command was cancelled. This lead to limitCurorRange
            staying active. Also was not cancelled after attack was done, so movement was hindered.
2022-06-12: updated attack to also work for NPCs, have found out that making a difference between players and npcs is
            a problem. now npc is looking for a npc on the map where the player is but does not find anything.
            i need to update this to also include player. but if i work through this, I can have npcs attack each other.
            But it does not crash anymore.
            Also, bugfix for setting attack crosshair and tile for melee attack.
            Need to think of how to switch the image and for how long.
            I think not the missile needs to switch the image, but the target needs to depending on whether it is hit or
            miss.
2022-06-14: so i have updated attack in a way that the victim has an image change for a hit (not yet for a miss).
            still dont like the way this is set up.
            added animation cycles a bit and added event for movement to update graphics.
            wonder how many repaints i can do or need to do, current for each movement of each entity a repaint is called.
            this should not hurt with modern double buffering, but still it feels icky.
            updated space action to post a playermoved event to trigger repaint instead of relying on the animation repaint.
2022-06-27: holiday break over. updated splash screen to actually run during the loading time of the game instead of fake
            before. also updated splash screen to have a shiny :D progress bar thats kind of calculated properly :D
2022-06-28: so I have moved attack to NPC and AbstractEntity, this will need to be disentangled some more. But basically,
            NPC will attack the player once set to aggressive. will need to implement moving towards the player.
2022-07-01: just a few minor changes, but NPC now sets attacking player as victim and will attack back.
            need to implement moving towards the player for instance if player moves away or uses ranged weapon.
2022-07-05: calculated map adjaciency for deciding between attack and move towards victim.
            added simple "move towards victim". This still has a bug.
2022-07-11: players now can range attack npcs and npcs can at least shoot back at the player if out of melee range
            (and has a ranged weapon). open todos: draw missiles one after the other. have turn really end after the
            missile has struck. definitely need to fix the AI behaviour in order to make npc with melee move towards
            player.
2022-07-13: movement towards the player in case of melee finally works. Oh, and I had a bug that advancing the turn did
            not work due to a few return statements, I need to look at some basic java syntax I think.
2022-07-17: started on LifeForm interface in order to iterate over interface instead of entities and needing to cast
            those or reimplement or even care about the actual type.
            I hope this works :D Clean Commit to be safe. Sorry later :D
2022-07-17: switch to interface appears to be finished. Looking forward to easier working with it.
2022-07-18: so learned something new about java. abstract method in an abstract class. very useful.
            not much new functionality, but a lot of refactoring today.
2022-07-22: refactored entity out of the keyboardaction area.
2022-07-24: LoS does work in a simple implementation, I need a different algorithm for that, but the basic is
            working. Things to do here: proper calculation for the LoS. Also making it impossible to attack something
            that you cannot see. Perhaps a "hidden" property is needed for the maptile instead and then just draw the
            tile as black instead of doing it purely on UI level.
2022-07-24: added hidden property to the maptile which is check at mouse click for the target tile. You cannot interact
            with hidden tiles now.
2022-07-29: worked some more on music. Music now changes based on game state, only thing is, need to figure out a good
            way how to carry game state changes.
2022-08-05: lots of things changed - got rid of thread issues, got rid of concurrent modifications.
            music still not working.
            Ok, changed minor things in Animation Threads to have all only send messages if there is an ui.
            Changed all threads to do that.
            extended threadnames to have all thread names.
            extend thread controller to handle all threads.
            finally got soundplayer to work, guess two synchronized for the getter/setter were all that was missing.
            Also implemented increase/decrease Volume now.
            Need to think how to implement options menu.
            finally got rid of the exception with the missing weather images for foreground animation.
            also some clean up in image utils.
            small bug in sound player fixed.
2022-08-07: removed java FX. updated intelliJ, learned about the dependencies stuff in intellij.
            awesome. there is some log4j issue there which i do not comprehend yet, as i am on 2.x.
            added tika to parse files to figure out content type, probably useful for checking contents.
            using it for checking whether music is music at the moment.
2022-08-07: moved code to SoundUtils to make sure that something is only added when it is audio.
            cleaned up some classes.
            converted Ultima 7 OGG to wav for playing through sound system.
            every game state will need a directory with songs.
            these songs will be stored in separate lists.
            based on the game state, a map will point to the coresponding song.
            or so,
            i.e. Gamestate as key -> arraylist of paths to play.
2022-08-08: implemented songListMap as songbook basically that just takes all songs in different array lists.
            as the songs are classified already, this works like a charm.
            implemented additional game states, that were missing.
            moved a method from game to threadcontroller.
            updated soundplayer to do as it should do (even if the code looks unwieldly atm).
            need to implement better game state that tracks, how many npcs on the current map are aggressive to me.
            or alive? or both? and dependent on that, the music will need to change, to check for victory or combat
            (if NPC is naturally aggro)
2022-08-11: did some more changes to lifeform, to have more logic via interface than inheritance.
            sound player now works for victory.
            victory is implemented, meaning no hostile npc is on the map anymore. will need to sketch this out better,
            to have hostile within vicinity.
            oh, and npc death and death state is implemented. not in a good way yet, but there it is.
            and game state currently is within sound player and game which is not good and needs to go.
            implemented previousGameState for going back to the original music before battle/critical/Victory.
            need to implement critical :D
            implemented reverse check in turns to figure out whether the border of 3 turns to switch back music is
            fullfilled. not sure whether it is worth to trying to figure out a fluent change with fade out/fade in
            over passing time, as this will break the turn concept completely.
2022-08-12: thinking whether appearance cannot just be removed. Will I have a GUIless game? will I have an ascii
            interface? think not. What for?
2022-08-15: so the missile topic is solved for now. I have two additional threads, one for game loop and one for missile.
            this now works together with probably a lot of overhead, but this can be tackled later.
            next test: will a ranged attack by an npc also work? it should block PC movements as well.
            fine-tuning of missile trajectory is luckily only settings and not code anymore.
            realized that storing game state does not really work properly with the sound selection.
2022-08-16: introduced AIBehaviour to reduce code in Game (no logic!). there is a bug in attacking by the npc, it will
            only switch to ranged, once it was in melee range.
            also bug in idle timer, that is why there are sometimes two missiles cast, would never have seen this otherwise.
            music timer kind of works, still would prefer the current song to stop running if its victory.
            Introduced GameConfiguration and broke half of the game.
            No, not that, but found a dependence on checkImageSize. removed that.
            Game looks a little bit more cleaned up.
            Need to implement a better way how to store ideas and bugs and so on, but I am too lazy to set up anything
            real.
2022-08-17: so what did I do today? I implemented that you can move the cross-hair at least one tile on the grid.
            need to think where to put the switch of the mode change. and how to track it.
            Quequetimer was 7 seconds, wayy too long.
            reduced some code in main window. the mouse released/onmessageevent(Keyboard) methods are way too long.
            need to remove complexity and really switch out pure UI stuff (i.e. where is the mouse? what is under
            mouse cursor), just write this once, use everywhere.
            get rid of mouse event usage, work with standard way for standard problem.
            did some refactoring on game and mainwindow.
2022-08-19: so moving the cross-hair cursor with arrow keys now works so far. Attacking finishes it, ESC stops it.
            Need to think how many commands need this kind of navigation.
            Done for get.
            Definitely need to get code out of main window, this is way too much.
            Oh yeah, did turn off some useless logging in UI build. This is to be handled seperately.
            Big make actions handled better indepdendent whether they are done via mouse released or keyboard.
            Make more of the action framework there.
            Both mouse and keyboard deliver actions which are then run, but only in one way and not about three.
            MOVE might stay seperate.
2022-08-21: So player around a bit with sound and also combining keyboard and mouse input. Nothing committable though.
2022-08-22: trying to figure out how to reduce code for actions.
            Refactoring for keyboard and mouse input is done. haveNPCAction is moved to action itself.
            Worth a commit.
2022-08-23: introduced Look command, this now only pipes to log, found that there is a bug in draw furniture.
            Bug needs to be fixed. introduced bug file for keeping bugs.
            added a few new ideas.
2022-08-24: fixed furniture draw bug. it was a remnant of drawing weather on top of it which still worked.
            awesome isnt it?
2022-08-24: kind of made the UI relative based on the amount of tiles to be shown.
2022-08-25: not sure if I did any work yesterday.
2022-08-26: implemented options action. Will need to think how to show and layout options.
            Probably all options go into GameConfiguration and are changed there, so no finals.
2022-08-28: not much to be done currently, fixed a bug for space action. removed old classes.
            Need to identify why AStarring NPCs towards victims does not work. Something is off with initizalization.
2022-09-04: so changed sound system to no threaded and working with clips. Which makes things easier on the one hand.
            also makes things harder on the other hand.
            need to figure out a good way how to deal with state change and particularly how to identify a pause
            for a stop.
            guess pause will need extra state in the class.
            nothing to commit yet, but on a good way.
            monday morning/afternoon should do the trick.
2022-09-07: so sound is in a much better shape now - only clips, no threaded streaming, but stop/start and
            pause/continue work much better now.
2022-09-08: worked a little bit on sound, need to make music type map dependent. need to get game state out of sound.
            security commit, now it gets unstable :D
2022-09-11: so game state is out of sound - that probably will bring a problem or two.
            guess will have to implement a "UI open" - not working completely yet. There still is a sound issue.
            But I implemented highlighting the currently active lifeform.
            This was actually rather easy, thanks to my already existing framework.
            So sound does not work on switching to game map for some reason.
            Well, it works every other time, so there is a general bug in there.
            Implemented "Map defines music" now. Writing about this took longer than implementing it.
            Also, general initialization (i.e. Turn 0) needs to be handled way better, there are so many issues
            because of that (graphics, sound ...)
            but that is for later.
            did some re-work on music stop and start - it could be that this is finally correct now.
            now only thing is to re-work attack and victory and going back to standard.
            But that is for another day.
            Implemented highlighting blinking for Player character. Was rather easy to do :D
            Need to fiddle with the details some but that is for later.
            Good time to commit.
2022-09-14: where did the last days go? No idea. Put some finishing touches on highlighting, there still is a bug there
            somewhere as the highlight count does not always work out properly, but its not visible, so dont care.
            will log it as bug.
2022-09-14: So implemented some basic sound effects, hit, miss, walk, blocked. Was mostly copy and paste of music system
            but its easier to do.
            I really need to think of a better state machine where i can gather information based on current action
            and do things accordingly, i.e. call commands on npc or world or pc and play sound effects.
            the current way would work, but its really not nice.
2022-10-06: back from vacation and wondering what I did last time.
            Perhaps I need to think about editing tools now for creating maps and npcs and items and what not.
            or i start removing appearance first?
            not sure, time will tell. For now, just updated the maven project, there were some updates to be done.
            found out that enter will try to switch the map independent of where pc is standing. updated that. also
            found bug that enter command had no npc action which is bollocks. fixed.
2022-10-12: started working on Map Editor - not sure whether I want to actually do it, but I will start anyhow.
2022-11-02: long long break - started looking into this again. Keyboard input is a little bit too sloppy, need to add a
            break to it, i.e. do not accept too many commands at the same time. Basically same timeout between commands.
            Configurable - need to figure out where the time actually stays. Think its in the animation cycles.
            Did some minor work removing constants and adding them to GameConfiguration.
            Will need to do FPS and game loop, I think, not sure the event based drawing yields any result.
2022-11-22: Introduced Game Redraw in Game loop - not sure whether this is any better at the moment, but we will see and
            find out.
2022-11-24: Updated Configuration to allow sound effects to be turned off. Updated sound handling a little bit to make
            it more flexible. Need to further make this easier. Also updated threading of game loop and canvas a little
            bit.
2022-11-28: music is finally running on startup directly. No need to switch maps once more, it was only necessary to
            properly post the event once the music system was running.
2022-11-29: "fixed the muddy movement" by turning off highlighting for the npcs which was causing it with a delay of
            100 ms per npc.
            moved gamestate to gamestatemachine class to have it in a separate entity. This now catches the events and
            basically does what happened before in game. Better that way and it seems to work right away? Weird.
            fixed startup - switched splash a bit - splash now explicitly is closed, then UI is explicitly shown.
            Lighting is calculated, highlight event is called. Now startup looks correct.
2022-11-30: had a nice concurrency bug with invokeLater - when music and sound were turned off, UI was not yet done
            when highlighting was called. awesome, isnt it?
            fix: invokeAndWait() instead.
            Also moved real UI creation after splash, explicitly close splash, explicitly open UI.
            moved start of music to latest point possible to avoid the skip during startup.
            Also fixed drag'n'drop out of inventory, no idea what I did there, need to leave the drop of canvas if the
            action is anything but DROP action.
2022-12-01: moved music initiation from init of music to initializeRest makes it cleaner.
            also, very glad that moving ui creation just to the end just worked :D seems my code separation is not that
            bad after all.
2022-12-04: some breaks and some minor updates without committing.
            There is a bug with inventory, but need to figure that out still.
            implemented heal and miss image.
            need to think about reimplementing this in a better way, doing this image by image is not that good.
2022-12-16: started working and thinking about eq dialog. Also setup on second computer.
2022-12-17: play with git a bit.
2022-12-18: working more on EQ dialog. Have most of it ready but its too big.
2022-12-25: missed some updates - found and fixed a bug with dialog closing - there was a way to close a dialog which
            bypassed setting the variable back to false - i.e. you could only open one dialog.
            eq panel is halfway working - it shows equipment at least.
            next stop - drag'n'drop from inventory into it.
            will need to make the whole game bigger probably, we will see.
            also fixed image setting, loading now happens once for many things and not reach time its used.
2022-12-28: a few days with on off work, did some re-reading on drag'n'drop. EQPanel now automatically shows and un-shows
            equipment.
2022-12-29: updated all classes to use CodeUtils.getRealClass() instead of having the method locally.
            Many changes therefore, but a lot less code. Went over a few classes to mark them for deletion.
2022-12-30: introduced CommandSuccessMachine - which is the class that will gather actions and decides what sound effect
            to play. Plays movement and miss sound already no idea why hit is not played.
2023-01-02: so command success machine will need to distinguish between player and npc, we do not want walking sounds
            overlapping. so currently only for attack.
2023-01-05: some break again - fixed missile drawing by moving from grid to the actual timer. Still need an event
            otherwise the 60 frames break things. Hm, perhaps go to 30 frames and turn off event?
2023-01-06: moved things from GameUtils into GameConfiguration.
            GameUtils gets init methods to clear the clutter in Game. Minimal effort but huge win in overview.
            Moved lots of image paths into GameConfiguration, moved lots of init methods into GameUtils.
            Some more decluttering.
2023-01-09: added UseEvents to be able to switch between 60 fps and event based update - might make a difference in the
            cpu consumption area sooner or later.
            tried moving UI position calculation to game out of painting. should work but kinda does not.
2023-01-10: calculate UI position now works, needed to call it after AI part in advanceTurn.
2023-01-10: updated RunGame to have the game actually run without splash screen.
2023-01-10: did some research on combining images and drawing only once.
            optimized Player.getUIPosition to set only once instead of returning a new point each request.
            it is incredible how often this is called. But now draw time is halved from 300ms to 150ms.
            which is interesting.
2023-01-11: fixed a few typos in AbstractEntity and removed some superfluous code.
2023-01-12: setup for switching mainwindow into pure listener and have window building outside.
            done with it. looks a little bit better now but needs to improve still.
2023-01-13: Introduced UIStateMachine to get UI State out of game and MainWindow.
            Finally Renaming MainWindow to controller.
2023-01-14: did some calculations and remaking for identifying the visible tiles.
2023-01-18: figuring out some things about how I identify visible and black tiles and stuff like that. There are bugs.
2023-01-20: success! drawing background and empty tiles in one method is done and the bug is gone
            and all is much faster, at least I would to think that way.
2023-01-22: recreation of paintNPCs is also done. Some fixing of scheduling also happened. Fixed bug advanceTurn() as
            paint method for "do not  use events" was not called at all. Generally, everything is way faster now even on
            the rather big map. removed animatedEntities, there is no need for that at all. Next stop: rework some more
            drawing stuff - iterating over 1200 tiles with 15*15 being visible at most is kind of nonsense.
2023-01-23: recreated identifyVisibleTiles() - will need to change that to a list of tiles (Points?) which I can update
            when it is necessary - only on advance turn, the easy way, and only of the player or when the time changes,
            the correct way.
2023-01-24: updated maputils to return blocked true in lookahead if at the edge of the map.
2023-01-25: cleaned up a little bit. Nothing overly new.
2023-01-26: introduced startPosition as command line argument. Want to switch to Picoli soon.
2023-01-26: change draw order, background, tiles, items then npcs on top.
            Also fixed bug in initialize, if startposition is empty, set player to 2@2 instead.
2023-01-30: I think I have patrolling working in general, but: AIBehaviour, AbstractEntity, NPCUtils, NPC all are
            intertwined. this needs clearing up. But not today. Patrolling works.
2023-01-31: moveTo is moved to NPC and player as there is a small difference unfortunately. NPC moveTo is now running,
            it is handled with each step now. Commiting before touching player moveTo
2023-02-01: created getTileByPoint and getTileByCoordinates to reduce a lot of new point() creation. updated all usages
            which are today using new Point().
2023-02-01: rename getTile... to getMapTile....
2023-02-01: updated CursorUtils: you can switch between mouse and keyboard for targeting a tile now, keyboard will
            always center on the tile, perhaps I change the mouse that it only centers on the tile automatically as well?
2023-02-02: UIStateMachine will always need to know about move position.
2023-02-03: white rectangle is now drawn only when the target cursor is active
2023-02-06: being somewhat ill left a lot of time and brain cycles to spend here:
            updated painting and made it way faster. Brightened up images are only done once and stored then, to be
            retrieved as necessary.
            introduced imagepair class to store the percentage, sourceimage, resultimage for brightening up images.
            introduced gamelogs for gathering statistics about the game.
            Much time is still lost in draw furniture, but that can be rectified as well. Sooner or later.
            If I find better data structure for retrieving the cached images, things will be way way faster.
            moved identifyVisibleTiles to game startup and advance turn. no need to calculate this each time something
            paints.
2023-02-06: made gridlines configurable.
2023-02-07: made identifyTiles in UILense synchronized in order to avoid concurrent modification: when painting happens
            while PC move hence the tiles change and this is happening on different threads.
2023-02-07: bugfix: visible maptiles was ever increasing.
            introduced lifeform for maptile, maptile can have inventory or furniture or lifeform on it.
            will remove iterating over lifeforms from paintComponent completely as we iterate over each visible tile
            only once anyhow
2023-02-08: planning the full rewrite of painting. doing this somewhen soon somehow.
2023-02-08: add npc to gamemap directly. remove the prototypes. Ran into issue where I used a reference instead of a new
            object. Tried to make AStar initialize a bit faster, but failed.
            The initialize should be way faster, but I do not comprehend how this works right now.
2023-02-09: played around a bit with a* but failing :D thinking about the rewrite of paintComponent a bit.
2023-02-10: calculation of visible map tiles already in screenposition is working properly. initial drawing of no map vs
            map is working now. commit.
2023-02-10: drawOnlyOnce is implemented halfway. lifeform and player now work.
2023-02-13: no surgery therefore some code - drawHighlightedTile had a huge bug, fixed now, not calling paint too often.
            still looking for the bug for drawing or actually calculating hidden tiles, something is off there.
            also - in drawonce mode, it is not necessary to center the tile contents (i smell an interface!) anymore.
            why? need to figure out, but first things first.
2023-02-14: fixed the bug - initialized a variable outside of the scope in calculateHiddenTiles and one variable inside.
2023-02-14: calculatehidden is now also hiding every tile after the first LoS block. This is /almost/ perfect.
            Now also not hiding the first tile if walking on LOS blocking tile. Also not quite perfect.
2023-02-14: bugfix - yet again another scoping issue
2023-02-14: bright up range is configurable either done during paint or precalculated. precalculated is slower actually.
            next stop: calculate darkness tile before.
2023-02-14: first stop: remove array list tilelist from Map - also removed east/south/west/north from Map and the lists
            also removed npcs from map.
            Also removed players and npcs from game and controller.
2023-02-14: only send one repaint message per repaint cycle. removed more code from game.
2023-02-14: changed random animation system to only deal with the currently visible lifeforms. initialize npc and player
            with an image, then this works fine.
2023-02-15: a time based move schedule is working again. But: it just runs the command queue.
            I would rather not have a queue but just store the command instead and run it again
            next time. Good for commit, though.
2023-02-16: move to schedule is added as separate routine in AI. I need to clean up Game, AI, NPC, NPCUtils.
2023-02-16: minimal cleanup and test framework is ready to run without UI
2023-02-16: added a test for player running from 0.0 to 10.0, actually works
2023-02-16: turned off much logging to make sure to debug move. Implemented teleport by accident.
2023-02-17: take away representation layer - was a good idea if I meant to change designs or switch to ascii it would be
            easy. but not going to support that anymore.
2023-02-18: updated missile draw to do a paint with a rectangle instead of a full only. tried to do the same for
            highlighting, but failed. tried to do the same for selectTile highlighting,
            tile highlighting does not work anymore for hidden tiles.
2023-02-18: implemented timers as alternative for graphic threads, all three done. Work as expected. Missile and sound
            are another option. Thinking about taking thread away from Game as well. Or at least, make it configurable.
2023-02-18: implemented Missile Thread as Util Timer. Takes away 10% CPU time right away.
2023-02-18: implemented Game without thread. takes away all CPU time, but not sure whether things will still work at all.
            sound behaves oddly at least.
2023-02-18: so going to use no events for now, takes less cpu. did some comments on game configuration. did some clean
            up in Game. blocked tiles are highlighted again. I need to distinguish between blocked naturally - mountain,
            or wall - or blocked by NPC - both cannot be stepped on, but one can be targeted, one not.
            To be done in the future.
2023-02-18: Bugfix - missile util timer was not caught during advanceTurn(). Also removed AIBehaviour if/else from Game
            into ... AIBehaviour. Surprise.
2023-02-19: refactored the timers and action listeners from yesterday to better packages. changed wanderer to do a
            look ahead before moving - this should help checking.
2023-02-20: made a check for wanderer, also made it usable in a test. will craete test case tomorrow where all edge
            cases are being tested - move wanderer along all borders.
            did some refactoring and moved AI code into AI class.
2023-02-20: added wanderer test. will add another wanderer test.
2023-02-21: added npc movement framework test. Will need to do some more work on AI planning and configuration.
2023-02-22: added some more tests. found a nice bug in attack() - for player this expects a mouse. need to disentangle
            this.
2023-02-22: added a melee test: changed NPC attack() not to depend on mouse or graphics.
2023-02-22: added ranged test for npc. works just fine.
2023-02-22: did some changes in the test setup and now testing simply one move action fails. Tomorrow.
2023-02-22: introduced UIState ENUM. Will use it and a kind of message mechanism and a TimerManager, as Timer stop/start
            are all over the place right now. Was wondering about memory growth, turns out it was the array lists of
            timings. will make those pluggable, then its fine.
2023-02-23: removed some additional memory overhead. now it stays at around 180mb.
2023-02-23: found a bug in NPC actions, NPC Action returned null by accident. Made AbstractAction abstract to get
            around this.
2023-02-24: added simple monster spawner to World as world event. player action is now done during advance turn.
            combat AI has a fix or two.
2023-02-24: fix for isRanged - if melee weapon is equipped but ranged is in inventory, also switch weapons.
            fix for switch weapons - the currently wielded weapon goes back into inventory of course.
2023-02-24: made a small change - undo button is now Debug button  and always active
2023-02-25: so there now is a timer for showing hit or miss image that is kind of working.
            Lifeform image is switched inside the timer task. this sounds and looks dirty.
            the task is now of type util as to not be blocking.
2023-02-25: did a little refactoring to group classes (particularly timers and listeners or tasks) by theme (missile,
            foreground, background, lifeform animation) and not by technical type
2023-02-26: switched player to attack(maptile) - removed attack(abstractkeyboardaction) everywhere. now we can do just
            attack(maptile) in testing. Testing breaks for now, need to figure that out first.
            also switched and check for npc state when entering AI not during actions.
2023-02-26: fixed for test: need to remember that the maptile now carries the lifeform, not the map per se.
2023-02-26: fix for move test: in normal game, for queues, I do the action and this then posts the event.
            in test: I dont do the action just post the event with the action.
            Crazy, I know, but it works. And needs a re-think and a re-write.
2023-02-26: took timers and music system out of game into manager classes. Everything appears to work still.
            Need to take Map also out of game, game does contain game state thats worth keeping.
            Do maps need to be serialized? not sure. Perhaps, perhaps not. If not, then they go into Map Manager.
2023-02-26: check which music to run in advanceTurn? moved to NoiseManager
2023-02-26: introduced ItemManager.
2023-02-27: moved commandqueue to Player where it belongs. took mousegrid state to UIStateMachine.
            fixed a bug in runActions(). took controller out of game into WindowBuilder as this needs to be out of game
            and all things gamey.
2023-02-27: fixed one minor resource leak. added a few serializable statements.
2023-02-28: first step to removing images from lifeforms is done. ImageManager is taking care of standard images now.
            safety commit.
2023-02-28: removing images is done. Special images are not yet working. Need to think of a good way to deal with that.
2023-02-28: updated generic image lists to include the special images for each type. a little bit of overhead in images
            but very easy to deal with as I just need to alter one place.
2023-02-28: changed animation util timer to be scrapped and restarted once hitmiss timer is running, that way the
            overwrite is simply not there and the hitmiss can always run to the full extent.
2023-03-02: implemented talk test. Now I only need to get talk actually involved in the dialog handling.
2023-03-02: updated talk command and talk dialog - its still ugly, but now it gets contents from the npc and the
            question/answer pair. still ugly as fuck.
2023-03-04: AttributeImages are now handled by image manager
2023-03-04: ItemImages are now handled by image manager, need to re-arrange this.
2023-03-04: All direct references to BufferedImage are removed. Took out ThreadController and made all access static.
            Pondering what to do with weathersystem. It is mostly for showing off animation after all.
            This is currently coupled somewhere but definitely needs a rewrite.
2023-03-06: did some more changes, am able to save the state now to file.
2023-03-07: added push and yank. We will support keyboard definitely, perhaps even drag and drop.
            need to work on MapUtils for that.
2023-03-07: implemented push and yank. both are working, not with checks whether the target is actually not blocked.
            but that is for later. An npc can also yank and push.
2023-03-08: made the bug with bright images visible at least. will need to deal with this on friday.
2023-03-10: image brightness is properly calculated now for visible area. will need to think about invisible area now.
2023-03-11: bugfix for yank/push, little debug fix
2023-03-11: yank/pull do not work on blocked tiles anymore
2023-03-12: ranged attacks now check the range of the weapon for npcs.
2023-03-12: ranged attacks are now also checked for player. out of map crosshair movement is also fixed
2023-03-12: select tile will no longer allow any selection outside of a tile
2023-03-12: select tile will no longer allow leaving the grid
2023-03-12: select tile will now automatically directly highlight the tile under cursor
2023-03-14: fixed paths for music and soundeffects demo now working
2023-03-16: updated sound effects to use types instead of numbers. types derived from file name. added javafx sound on
            debug button. still not working.
2023-03-18: mini commit to update maps.
2023-03-27: removed command line arguments and switched to config
2023-04-02: fixed the bug with the npc type null - it was due to an npc being initilaized incorrectly because the map
            is not even active.
2023-05-08: long break - added cast as action type. will need to implement spellbook and magic somehow somewhen.
2023-05-09: added tiletypes
2023-06-18: simple way of adding a cutscene does exist now. refinement is to come, starting now.
2023-06-24: cutscene with list of images is working, with list of text not yet quite, but good enough for a commit
2023-06-27: closing cutscene will now only close the cutscene frame, not quit the game
2023-06-27: enhanced cutscene now runs with texts, also cuts back to the scene afterwards ;)
2023-07-29: commit to sync
2023-08-06: after a month of not being able to work, tada, I have dynamic text in cutscenes.
            Only one line of text per image, but worst case - repeat image for longer texts
2023-08-06: quick sanity check to make sure that texts and images have the same size
2023-08-07: little bit of refactoring and thoughts about spellBookListModel and skills.
            Implemented double movement for player with $DexThreshold reached
            This also gives me double transportation speed.
2023-08-14: updates lifeform to include a method for checking dex also for npc. lets see whether i can implement this
            for npc as well :D
2023-08-16: implemented double movement for each NPC individually.
            Double NPC movement will not lead to an extra turn.
            Turn is for player action only, so it will have two NPC actions at the same time.
2023-08-16: added a second NPC as in NPC the dex check is done based on ID not on proper attributes.
            Works.
2023-08-17: introduced actual attribute values to npc.xml and npc parser.
            updated NPC to work with that and default only if no values are
            set.
2023-08-29: implemented basic teleport by looking at a signpost.
            so I have implemented teleport by adding a SIGNPOST tile type.
            Now several issues arise from that:
            1. Is the sign post a tile type or really not rather an item which is
            in the inventory of a tile?

            2. is the teleport target part of the tile or part of the item?

            3. I have a move(x,y) routine already, but it does not know another map yet.
            switch maps is something that is done as part of the game
            - triggered by player -  not as part of the player.
            that needs to be moved in order to also have NPCs switching maps.

            4.currently, the map only allows one exit.
2023-08-31: maptile now has its own exit that can be used.
            switchMap had a bug relying on old targetID instead of coordinates.
            thinking whether npc needs to know its map, or whether map needs to know its npcs.
2023-09-01: switchMap is now handled by Player or NPC instead of Game. Player still has some Game logic in there but
            it should work for both - does for player - for NPC need to implement that they actually switch the map or
            know how to - guess will make it in a way with items, if an exit is right next to it, walk towards it and
            enter - for "AI" testing.
2023-09-02: so NPC would switch map if npc finds one - the other map is a bit broken yet (where is the new NPC then)
            as is the re-draw upon entering.
            but at least i learned about CopyOnWriteArrayList which essentially does a thread-safe operation by doing
            create copy, change, use as original internally without bothering developer.
2023-09-18: player map switch just works. NPC switch does not - breaks both player and npc actually. but at least i know
            where to look. did some minor refactoring.
2023-09-30: did some minor work - fixed simple teleport. This will need to be handled differently somewhen.
2023-09-30: created initial version of spellbook. Two columns of items, with limited functionality. double click and
            single click is working, should be extendable. multi-select is removed, mouse move highlighting needs to be
            removed yet.
2023-10-01: added model for spellbook table. Renderer is not working properly yet. Also click and dbl click need to be
            redone to work really properly.
2023-10-01: problem found - tables are one data record per line, I have two columns and each cell represents a single
            data point, lets see whether I can mold it that way or whether I need to switch to two lists.
2023-10-05: safety commit for storing current state
2023-10-29: and a rather lengthy break due to vacation and sickness. But a small bugfix:
            dialogs are undecorated now therefore no X anymore with will break UIStatemachine's Dialog State as this
            appearantly cannot be handled. But now its looks more gamey anyways.
2023-11-01: implemented the XML and XML parser for enter_tile and leave_tile descriptions. not sure yet how to store
            whether a message has been fired and shall not be repeated. dont have a framework for that yet.
            to come: implement the dialog message for it. could be a little brother of cutscene.
2023-11-02: added the framework for firing messages before move and after move. UI is still missing.
2023-11-02: added prototype dialog for enter/leave descriptions
2023-11-05: implemented a way to at least store the tiles whose message has already fired during run time, no persistence
            yet.
2023-11-07: changed the spellbook from table to multi-column list view. graphics for spellBookListModel are needed here.
            Added spellBookListModel to AbstrctEntity.
2023-11-10: added some spell data.
2023-11-11: added SpellManager, added SpellsXMLReader, added entries to GameConfiguration. Added initializer.
            added entry for imagemanager, updated spellbooklistrenderer and voila, initial list is visible.
2023-11-14: changes to spellbook dialog to make sure dbl click now selects a spell. now to think of how to close it,
            then get into cross hair mode and then actually run the spell.
2023-11-14: extended spelldialog, will need to switch (C) to cast to open the spellbook.
2023-11-21: a spell is now selected from the book and a target is selected, still problems with idletimer and with
            actually a proper implementation for casting a spell. So Spellbook is one way to select the spell.
            Cast will provide another means for it just because I can.
2023-11-22: Finished implementing Spell selection from Spellbook - all in placeholder graphics still. Cast Spell action
            on abstract entity now determines which spell to take and in a simple way calculates what will happen.
            Resurrect actually works fine, NPC will reanimate with both icon and all that, even state stays.
            Not sure how to treat proper spell calculation, sounds like delegator pattern honestly in a separate helper
            class. But working for now.
2023-11-23: implemented (C)ast - this is the shortcut to just cast the spell that was last selected in the spelbook.
2023-11-24: made sure you cannot cast without any spell readied.
2023-11-24: closing a dialog activates the MainFrame, this led to IdleTimer being started right away even if crosshair
            mode was still active. Fixed that. Hopefully, UIState is always correct.
2023-11-25: little refactoring: UI State for Dialog is handled within AbstractDialog for making sure it is true and
            within WindowClosingAction that it is set to false.
2023-11-26: small bugfix: make sure that in Controller ESC is allowed to cancel crosshairs, but no other action is
            valid while one is already running, i.e. not trigger (A)ttack while (C)ast is already valid.
2023-11-26: small refactoring: if dialog is open, dont trigger an action apart from ESC.
2023-11-26: did refactoring on Controller->onMessageEvent() - this is awful code. need to do this systematically.
            found an interesting bug with the not action triggering from above. this kills keyboard movement with an
            active command. need to figure out how to properly handle that.
2023-11-26: refactoring Controller->MouseReleased() to ControllerDelegator->handleMouseReleased<TYPE>.
2023-11-26: added panels for page turning in spellbook. Will need to think about whether separate UIModel and ListModel
            are needed or not. The soundeffect is at least already working.
2023-11-27: so left and right panel are working kind of. Model changes in the background are working. Initial drawing of
            SpellbookPane is working as well. Update is not working, altough filtering in the background works.
2023-11-29: commit in broken spellbook state: filterByLevel is updating the extended DefaultListModel.
            no manual repaint. therefore, not working.
            also: selecting spell with dbl click and closing dialog will at least in debug - leads to
            dbl-clicking on spell -> set spellinhand -> close dialog -> spellinhand still null.
2023-12-03: Simon did some help with the SpellDialog. Had several errors in there.
            Fixed currentSpellInHand - the dialog needed to be rendered modal in order to stop.
            Introduced Lombok and lombok config in order not to need to do logger boilerplate.
2023-12-04: did some refactoring to remove getter/setter/logger.
2023-12-04: did some refactoring to remove getter/setter/logger. Probably fixed a bug there?
2023-12-05: did some lombok refactoring - definitely fixed a bug yesterday - npc returned 0 for health :)
2023-12-05: did some lombok refactoring
2023-12-07: bugfix due to refactoring: setMapPosition needs to check for blocking if the UI is open.
            Also, controller missed a break
2023-12-13: did some refactoring: also fixed yet another bug with old get methods
2023-12-13: some refactoring on dialogs, introduced skills dialog which is empty. created dialogfactory
2023-12-14: small refactoring to move buttons to AbstractDialog. Finally updated DialogFactory for all dialogs.
2023-12-14: started working on skilltree - will just be a standard tree for now - not sure whether the underlying UI
            can be changed or should be changed.
2023-12-22: SkillTree easy first version is working. Still broken and many features missing (selection for instance),
            but at least showing data. Damned Interface implementation.
2023-12-24: Skills now have images, SkillTree shows images, definitely too big images.
2023-12-27: fixed a bug that when player comes into the game, the tile player is on is not actually blocked.
            need to think about a "UI opened event" just like in VSE.
2024-01-09: break over new year - did a bit of refactoring, removed lots of boilerplate code. removed items from map
            there is no need for that as maptile has its own inventory.
2024-01-10: removed more getter/setters by using lombok
2024-01-13: removed a few more methods for lombok
2024-01-13: added text map translate, basically working, but maptiles arraylist might be empty.
2024-01-14: added text map and fixed map setup - what did I think of back then. Weather is a mess that needs to be
            cleaned up.
2024-01-15: success: open works. Simple version yet, but it does.
2024-01-18: open works for opening and closing now.
2024-01-18: maptile now has a direct add method instead of going through the inventory first.
2024-01-26: added keyboard reference guide
2024-02-07: dont have much time currently - took runGame and re-made the big if/else into one.
2024-02-09: added a feature list
2024-02-21: small refactoring and additions for daynight cycle - there are a few errors also in map initialization.
2024-02-21: Updates to MapUtils/CodeUtils to make sure we can translate maps to XML once then only load from XML anymore
2024-02-24: bugfix: at least with calculating brightness in paint, lightsource furniture is taken into account again
2024-03-07: Update: changed the RunGame structure to make more sense and included a title screen that branches off into
            character editor and credits and so on.
2024-03-07: OK, have a minimal title screen. Will need additional work with setting the timers only with actual game
            start. Will need to write a new minimal Music Player that does not have the timers and additional baggage
            the current one does which is used for game, I actually just want to have a small sound and perhaps click
            sound player for the intro stuff. No need for additional things.
2024-03-14: title screen to game works. Music on title works.
            Will need to get this initialized before though.
            Will need to do a few changes with the timers that they only start once the UI
            is actually opened. What was the bug? The text map translator added the translated map already before it was
            parsed again and added again and the wrong version was added.
2024-03-21: implemented a simple character editor, is not persisted yet.
2024-03-25: character editor: also started creating the actual tile preview. will need to handle this better.
2024-03-26: only minimal changes. few refactorings.
2024-03-31: reformat commit.
2024-04-01: had a few mistakes in how furniture was handled and not properly handled it at all. fixed now.
            introduced using item manager for actual instance creation. open issue: why does the torch not burn right
            away - perhaps need to introduce an additional field instead.
2024-04-01: fixed furniture initialization - during XML parsing. introduced burning as separate attribute. perhaps can
            be used somewhere else.
2024-04-02: some refactoring and some start on schedule pausing on map switch.
2024-04-03: wrote some thoughts on scheduling. added deepcopy for weapons. updated outpost map to actually include items
            on the floor. unfortunately, this is now handled by using weapon, armor, utility as separate entities.
            Not sure I want to keep it that way. We will see.
2024-04-03: did a deepcopy for Armor items and Utility and Food. Updated ItemFactory to work actually like one.
2024-04-04: refactoring to move baseHealth to GameConfiguration out of Game.
2024-04-04: updated UtilityXMLReader to case statements.
2024-04-08: updated ItemFactory to also work with Food, although we dont have any items defined yet.
2024-04-09: mini-update fixed a small bug in UtilityXMLReader. fixed two incorrect comments.
2024-04-10: fixed light source update. introduced image String for FurnitureItem to have item name differ from ImageName.
            introduced maxLightRange. Calculate area around burning furniture item based on actual light range of item.
2024-04-28: did a lot of things - introduced additional Lense with one or two tiles more around.
            Still an edge case with an issue, but that will need to wait to be identified.
2024-05-04: small pondering on NPC AI
2024-05-18: extended NPC AI in a way that npc will walk towards a light source and douse it if its daylight and ignite
            it if its night time.
2024-05-24: Initial Work on Options Dialog - just with one slider for victoryWait. it appears to work. Setting to 15
            seconds works just needs to reinitialize the timer. Not sure what will happen if this is reset while it is
            actually already running? Testing will find out.
2024-06-04: untested! update for schedules to add a start time. Will need extension of XML format and XML parser and all
            that in addition.
2024-06-10: did some re-work on schedules. this also lead to a basically re-write of how maps and npcs work.
            current paradigma is that npc is fully initialized and only added to the map without any further information
            added there. not commited as NPCFactory needs to be created.
2024-06-15: updated NPCFactory/NPCManager, updated NPC. Fixed a bug for UIState. Fixed a bug where state was missing
            from NPC factory builder.
2024-06-15: tested a* in standard map again. works even with added mountains. doesnt work in outpost map.
            why would this be the case. Still is an issue there. Giving up for now.
            A few bugs fixed. Stumbled over a really big big one with the a* not working on outpost. re-tested patrol,
            works on gameMap. Need to commit this now in this state.
2024-06-16: some minor cleanup, added some more debug options to declutter log. identified issue with NPC handling.
            spawning NPC in world is still using old NPC setup.
2024-06-16: updated MapPosition and TargetPosition for patrolling. adding this to map again and away from npc.
2024-06-17: updated world npc spawning to work with the new NPC setup. found an issue in the combat code.
            fixed the issue in the combat code.
2024-06-20: Small update on world and spawning, will need some rework which is all written down in ponderings.
2024-06-23: updated spawning to make it a bit more robust, will need to go into map actually.
            ran into a nice bug for missiles.
2024-06-25: updated Player to have own implementation of decreaseHealth. Removed Dead check from attack as this is a
            topic for AIbehaviour.
            Found a bug when selecting a different target - still shooting at old target.
            Fixed a small thing for updating delegation for evade.
2024-06-26: updated NPC and map and world - there is a spawn limit now per map which is taken into consideration now.
2024-06-26: updated AbstractEntity - getVictim is only used if the victim is actually still alive. Also tile has
            precedence. Also updated decreaseHealth to unblock a tile with a dead npc.
2024-06-28: updated some classes to include additional log flags
2024-06-29: bugfix: mobs are not drawn if the tile is hidden
2024-06-29: some minor code cleanup - UILense issue almost handled. Some more debug log flag and flag statements added.
2024-06-30: mini bugfix for look - will not create an error now if look is pressed and mouse is outside of the map.
            when mouse is not moved but player moves it can be that mouse is now outside of the grid. will need to think
            how to handle that.
2024-07-01: mini update to AbstractEntity to set hostile to false once npc is dead.
2024-07-01: found the bug for a* halleluja. Its the ids of the maptiles need to be different. Just need to fix this
            properly now.
2024-07-02: mini update for MapXMLReader - there is a bug there for the map position
2024-07-03: updated mapxmlreader - x and y are removed for npcs and string is loaded. Patrolling is working one way
            at least, but not the way back. Not sure why yet.
2024-07-05: bugfix a* for some reason, row and column or x and y were switched. For some reason this somewhere did work.
            Probably fixed it in MapUtils without noticing the side effects.
2024-07-08: parameterized game startup and extracted actual game startup method in order to have a better starting
            point for launching a headless game for tests.
            Removed two now incorrect bug todos from NPC and AIBehaviour.
            Updated BattleTest and TestGameSetup to reference Game.getCurrent() instead of initializing Game in a
            separate setup.
            Now I need to find out how to run the tests from within Gradle.
2024-07-09: updates AIBehaviour to use debug statements properly.
            extracted helper method to check for state of life form.
2024-07-09: mini update to make all the tests to use the proper initialisation.
2024-07-11: mini fix for idletimer, was not started again after de-activation. issue was in the actionlistener that had
            a depencency on UISTATE.OPENED only. Of course this needs to work for activated again.
            Wondering whether I need to update this to just use OPENED instead of ACTIVATED. So, game UI is not here, or
            Game UI is here.
2024-07-11: updated most timers to respect whether UI is actually open or not and also to only debug when debug flag
            is set properly.
2024-07-13: moved schedule to map and npc. starting schedule works already, but then there is a bug I do not yet
            understand.
            updated pondering about schedules with a plan.
            updated schedule to contain the active activity
            did lots of debugging statements additions. will need to check whether there is a better way to do that.
2024-07-15: updated a* implementation to take tiles into consideration which can be opened. Works already well for npc.
            currently, open is done while walking, that might need to change but it works and that is fine for now.
            So now, npcs should be able to find also complex ways around a map.
            But that means I will need to create one.
2024-07-16: updated NPC to have proper debug statements.
2024-07-16: updated a few classes with debug statements, added some more debug flags
2024-07-16: updated some more classes with debug statements, introduced automap and automapcanvas.
2024-07-16: automap works actually just fine - with one exception. Now map is for one tick revealed as the map is
            fully calculated.
            This needs to change to a map copy.
2024-07-16: updated window closing event for now - needs a proper fix, not sure how to. next topic: add labels to map.
            lets see whether this works.
2024-07-17: map and maptiles are now replicated, problem is I do this each timem for now. Will need to store this.
            But at least it works, this is a question for an optimization.
2024-07-18: automap allows labels, labels can be edited again and drag dropped. Are persisted, can be re-used, changed
            again. And so on.
2024-07-19: automap now calculates the scaled images only once per tile, optimization.
2024-07-20: only draw map of explored tiles.
2024-07-21: draw only explored tiles is not working properly yet, the code in MapUtils is broken here.
            Updated AutoMapCanvas to have all initialization done in the constructor. paintComponent now really only
            does that.
2024-07-23: Translate Text Maps is now a config entry.
2024-07-23: cleaned up paintComponent in Grid a bit. Removed the ImageManager as we definitely arent going to to back to
            not using that.
2024-07-23: Updated AutoMap to paint a red block where the player is on the map. This can be improved by proper graphics.
            Added a custom border, will need to play around with it way more.
2024-07-24: adapted gradle to remove javaFX. all commented out only. Startup time is improving.
2024-07-24: commented out javafx plugin completely. updated openDoor to make sure that it is not closing if it is
            blocked.
2024-07-24: updated AbstractEntity->handleOpening and added delegation method to maptile to handle open/close better.