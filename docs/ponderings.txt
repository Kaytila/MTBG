2024-04-03: On schedules
==================================================
So thinking about how to do enhanced schedules.
Simple patrolling between point a and b I already have, npcs are a* past each other (not through closed doors -yet).
but what about real schedules? How can I even properly define them without hard coding things?
I am thinking about using a cron like syntax for the timing, i.e. at 0 12 * * * 56@43 (go to that spot every noon).
But how to pause them? Do I need to pause them at all?
What will happen if I have 100 schedules running in parallel?
Or are they paused if player is not on the map anymore? What will happen if player enters map at 12:01?
will the npc start moving then? or will it not move?
I am really wondering how this is solved in U5-7.



2024-04-24: On Edge cases
====================================================
So I ran into another topic - pre-calculation of tiles. Originally, I did not plan for that because, modern hardware just shruggs this off.
It kind of does, except that the paint code became a bit convoluted and hence the result was flashing a bit.
But then I thought about how to do this in a proper way. So I wrote some code that calculates (and draws) the content of each tile of the visible area.
UI just needs to paint the result for each visible tile, no more calculation.
Horray.
That of course comes with certain issues:
First of all, animations are only happening step by step anymore. Not nice, could be ignored actually.
But: of course, if you step outside of the already known area, the line of new tiles flashes for a milisecondfrom white to actually being there.
So, actually worse in a sense than the original.
Easy solution: just pre-calculate one additional line at top bottom, left and right.
Problem was, I had a lense object that always contained the visible number of tiles around the player.
This is used about everywhere.
So what to do?
For now I have just added a second lense, the wider lense, if you will, that calculates the additional tiles (i,e, one complete one tile wide rectangle around the original lense) on top of the actually visible ones and this goes into pre-calculation. While actual drawing is done on the really visible one.
This of course works, apart from two tiles:
x=0, y=max and x=max, y=0. A nice double edge case. Really two edges.
I like it.
Will solve this somewhen, not today.


2024-05-04: On NPC AI
=====================

So how to implement AI properly? Currently, I have this strewn across two classes with lots of static methods.
Somewhere, I need to implement a central decision tree that looks like a flow chart:
isHostile ->
            enough hp ->
                            in range ->
                                       melee -> attack player
                                        ranged -> attack player
            -> flee (move away from player)
-> no combat situation
    -> on schedule?
        -> move along on schedule
    -> not on schedule?
        -> pick up items
        -> is it daylight and light source is burning in the vicinity? walk towards it
        -> daylight and light source next? douse it
    -> is wanderer? move in wanderer pattern
    -> is static -> wait
    -> is patrolling -> patrol

And that is only what currently is halfway implemented from a npc attribute level. Not even everything is implemented
already.
Would perhaps be worth looking into flowchart to process flow translation software whether this already exists.


On GameTime
=============

read an interesting report on game time or rather the way game time is flowing. Goldenflame is using a tic system for
his game which quite resonates with me due to MUD experience.
The way I understand this, you have a tic that is x time long and each command you are doing does take a certain part
of a tic. For multimud, a tic meant 72 seconds, so you could asynchroniously fire a lot of commands within that 72
seconds and most of them were very likely handled in however well the stack was being processed.
Certain commands had waitstates as well. Not actually sure how these were handled.
For the GF's game, there is a tic and each command takes x percent of a tic. So to calculate the passage of time, there
are different levels to be taken hence different percentages.
For me, so far, I have introduced a value in each map definition that tells how much time will pass for a command that
leads to a turn rollover.
There are no commands take that longer or less long.
The only thing so far is that dexterity - and perhaps mounts as well - will simply say, "you have more commands in the
same turn".



on NPCs
========

You need a place where to define NPCs:
That can be generally and you simply place a version of an NPC on a map.
Or it can be that you define the npc per map.
Or you do a little bit of both:
Currently, I am trying to go for the both approach. The idea is that general things are defined on a global level,
i.e. what stats an NPC has and what mobasks NPC reacts to might be globally defined - think guards - but additions are
handled locally.
Now the more I think about it, the less sense this approach makes:
The mobasks can be copy'n'pasted, as can be the stats, but it will take away a huge issue.
So which way to go?
I am leaning more and more to an approach or returning everything to the NPC itself and only add the NPC id to the map
with the starting position.
The rest is handled on NPC level.
It would be definitely easier.



on spawning
===========

It is fun that I am dealing with issues and topics here that Richard Garriot occupied himself with when
he was 16 or so. Fun, but that is what upbringing and surrounding does to you.
So spawning hostiles absolutely has to depend on which map we are on, so this needs to go into map definition.
Then spawning needs some modifiers: dark/light/weather like knights of legend? Level?
game progress if that can be modeled?
In addition to that, we need to be sure we do this the right way: where does a monster need to spawn?
In the direction player has moved? or 90 degrees? Or 180 degrees? Or randomly?
I guess this needs to go into game configuration.
For now, it is kind of working, as well as it can given the circumstances. One Mob will be spawned, thats it.


on quick travel
===============

so what I need to test now is not only in map quick travel, but also across map quick travel.
this is going to need some more additional code.
Also, this is going to take more time as the XML structure probably does not allow for that yet. Or does it? Will need
to see.


on testing
==========

So i need to setup testing properly again 