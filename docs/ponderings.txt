2024-04-03: On schedules
==================================================
So thinking about how to do enhanced schedules.
Simple patrolling between point a and b I already have, npcs are a* past each other (not through closed doors -yet).
but what about real schedules? How can I even properly define them without hard coding things?
I am thinking about using a cron like syntax for the timing, i.e. at 0 12 * * * 56@43 (go to that spot every noon).
But how to pause them? Do I need to pause them at all?
What will happen if I have 100 schedules running in parallel?
Or are they paused if player is not on the map anymore? What will happen if player enters map at 12:01?
will the npc start moving then? or will it not move?
I am really wondering how this is solved in U5-7.
Additionally: how to make sure that an activity is repeated once the rest of the cycle has finished?
Currently, NPC will walk towards the first activity, then stop, then try to go to the next one but fail utterly.
So it should be
trigger for 1st
1st activity
end 1st
wait until 2nd
trigger 2nd
run 2nd
end 2nd
...
end of last activity
reset all
wait for 1st
trigger 1st
How to do that in code?
I do not know yet. Perhaps in a non-deleting queue?
Also, the starting point is too naive - if the check is only for npc schedule to exist, npc wont ever do anything else
apart from combat, as there is a schedule coming after. need to determine first whether there is a schedule activity
that needs to be running.
Introduced an additional variable to make sure we always have a currentActivity. That all runs nicely already, but:
I do not make the bridge between "schedule activity1 is finished" and "go back to random until number 2 starts" yet.
Unsure how to deal with that. Perhaps two variables?
1. is active?
2. is finished.
3. on day rollover - clean finished? not sure yet.


2024-04-24: On Edge cases
====================================================
So I ran into another topic - pre-calculation of tiles. Originally, I did not plan for that because, modern hardware just shruggs this off.
It kind of does, except that the paint code became a bit convoluted and hence the result was flashing a bit.
But then I thought about how to do this in a proper way. So I wrote some code that calculates (and draws) the content of each tile of the visible area.
UI just needs to paint the result for each visible tile, no more calculation.
Horray.
That of course comes with certain issues:
First of all, animations are only happening step by step anymore. Not nice, could be ignored actually.
But: of course, if you step outside of the already known area, the line of new tiles flashes for a milisecondfrom white to actually being there.
So, actually worse in a sense than the original.
Easy solution: just pre-calculate one additional line at top bottom, left and right.
Problem was, I had a lense object that always contained the visible number of tiles around the player.
This is used about everywhere.
So what to do?
For now I have just added a second lense, the wider lense, if you will, that calculates the additional tiles (i,e, one complete one tile wide rectangle around the original lense) on top of the actually visible ones and this goes into pre-calculation. While actual drawing is done on the really visible one.
This of course works, apart from two tiles:
x=0, y=max and x=max, y=0. A nice double edge case. Really two edges.
I like it.
Will solve this somewhen, not today.


2024-05-04: On NPC AI
=====================

So how to implement AI properly? Currently, I have this strewn across two classes with lots of static methods.
Somewhere, I need to implement a central decision tree that looks like a flow chart:
isHostile ->
            enough hp ->
                            in range ->
                                       melee -> attack player
                                        ranged -> attack player
            -> flee (move away from player)
-> no combat situation
    -> on schedule?
        -> move along on schedule
    -> not on schedule?
        -> pick up items
        -> is it daylight and light source is burning in the vicinity? walk towards it
        -> daylight and light source next? douse it
    -> is wanderer? move in wanderer pattern
    -> is static -> wait
    -> is patrolling -> patrol

And that is only what currently is halfway implemented from a npc attribute level. Not even everything is implemented
already.
Would perhaps be worth looking into flowchart to process flow translation software whether this already exists.


On GameTime
=============

read an interesting report on game time or rather the way game time is flowing. Goldenflame is using a tic system for
his game which quite resonates with me due to MUD experience.
The way I understand this, you have a tic that is x time long and each command you are doing does take a certain part
of a tic. For multimud, a tic meant 72 seconds, so you could asynchroniously fire a lot of commands within that 72
seconds and most of them were very likely handled in however well the stack was being processed.
Certain commands had waitstates as well. Not actually sure how these were handled.
For the GF's game, there is a tic and each command takes x percent of a tic. So to calculate the passage of time, there
are different levels to be taken hence different percentages.
For me, so far, I have introduced a value in each map definition that tells how much time will pass for a command that
leads to a turn rollover.
There are no commands take that longer or less long.
The only thing so far is that dexterity - and perhaps mounts as well - will simply say, "you have more commands in the
same turn".



on NPCs
========

You need a place where to define NPCs:
That can be generally and you simply place a version of an NPC on a map.
Or it can be that you define the npc per map.
Or you do a little bit of both:
Currently, I am trying to go for the both approach. The idea is that general things are defined on a global level,
i.e. what stats an NPC has and what mobasks NPC reacts to might be globally defined - think guards - but additions are
handled locally.
Now the more I think about it, the less sense this approach makes:
The mobasks can be copy'n'pasted, as can be the stats, but it will take away a huge issue.
So which way to go?
I am leaning more and more to an approach or returning everything to the NPC itself and only add the NPC id to the map
with the starting position.
The rest is handled on NPC level.
It would be definitely easier.



on spawning
===========

It is fun that I am dealing with issues and topics here that Richard Garriot occupied himself with when
he was 16 or so. Fun, but that is what upbringing and surrounding does to you.
So spawning hostiles absolutely has to depend on which map we are on, so this needs to go into map definition.
Then spawning needs some modifiers: dark/light/weather like knights of legend? Level?
game progress if that can be modeled?
In addition to that, we need to be sure we do this the right way: where does a monster need to spawn?
In the direction player has moved? or 90 degrees? Or 180 degrees? Or randomly?
I guess this needs to go into game configuration.
For now, it is kind of working, as well as it can given the circumstances. One Mob will be spawned, thats it.


on quick travel
===============

so what I need to test now is not only in map quick travel, but also across map quick travel.
this is going to need some more additional code.
Also, this is going to take more time as the XML structure probably does not allow for that yet. Or does it? Will need
to see.


on testing
==========

So I need to setup testing properly again. Not sure how this works together with Gradle - if at all.
I have not understood this at all. Also I am not sure how JUnit5 behaves compared to JUnit4.
All of this is unclear, but at least the setup of Game without UI for testing should be way more easy.


on ranged combat vs. melee
==========================

So I am currently re-vamping combat and wondering how to deal with mobs switching between ranged and melee attack.
Do we have any idea how this was implemented in Ultima IV-VI?
For example, bridge trolls or ettins do have ranged attacks, but they do not solely rely on them, but move towards the
party members as well.
Was this just done with a random number or was there a preference implemented that was factored in calculating a
percentage?


On Automaps
===========

I have implemented an automap which currently just takes all map tiles and draws them to the screen on tile at a time.
Then the labels - if there are any - are added as child components.
Wondering whether it isnt more efficient to create a huge image in the background and then just draw one image to the
screen.
The labels will be handled as now.
Also, I have realized that the calculation of the images is rather ... interesting. Basically everything is already
handled in the MapUtil method and not in the UI component, except there is still a little bit
happening in paintComponent on the Grid, but perhaps this should stay that way, for otherwise, I would have a
highlighted automap which I do not need.
So careless design produced an advantage after all. Lets call it intuitive design.


On Grid and grid handling
=========================

In order to properly handle mouse position and mouse input, it is important to make sure that I capture the mouse
position. Currently, this only tracks whether the mouse is outside of the grid, or inside.
Just realized an issue:
The mouse might actually be within the grid, but still on a null tile for the frame outside. I need to handle that.
Also need to handle that the mouse is on an "currently hidden" tile.
So actually two general framework topics I need to handle now. This should take care of many separate issues concerning
UI handling.

1.  if mouse pointer is outside of real existing tiles: make sure all commands move it back on centered player once
    the commmand key is pressed or once the mouse is moved. command key should be sufficient actually. This can be
    handled generally for all commands.

2.  if mouse pointer is outside of grid at all: also move it back on player once a command key is pressed.

3. if mouse pointer is on a hidden tile, same thing, move it back on player.

4. make sure to re-check all mouse commands whether handling is done in the same way for all commands.

5. same for keyboard input, whether single-command or dual-command.
